from scipy.stats import beta
import math

def calculate_angle(vertex, a, b):
    """
    Calculate the angle (in degrees) between three points: a -> vertex -> b.
    
    Inputs:
        a       = point 1 (e.g., hip for hse, shoulder for sew, or elbow for ewp)
        vertex  = point 2 (e.g., shoulder for hse, elbow for sew, or wrist for ewp)
        b       = point 3 (e.g., elbow for hse, wrist for sew, or pinky for ewp)
        
    Output:
        Angle in degrees between a -> vertex -> b.
    """
    AV = (a[0] - vertex[0], a[1] - vertex[1])
    BV = (b[0] - vertex[0], b[1] - vertex[1])
    
    dot_product = AV[0] * BV[0] + AV[1] * BV[1]
    AV_magnitude = math.sqrt(AV[0]**2 + AV[1]**2)
    BV_magnitude = math.sqrt(BV[0]**2 + BV[1]**2)
    
    if AV_magnitude == 0 or BV_magnitude == 0:
        return 0.0
    
    cos_value = max(min(dot_product / (AV_magnitude * BV_magnitude), 1.0), -1.0)
    return math.degrees(math.acos(cos_value))

def compare_front(new_data, hse_params, sew_params, ewp_params):
    """
    Computes similarity scores (0-100) for front-view angles based on new data and 
    the provided Beta distribution parameters.
    
    Inputs:
        new_data  : dict with keys "hip", "shoulder", "elbow", "wrist", "pinky"
        hse_params: dict for Hip-Shoulder-Elbow angle in the form 
                   {"mean": mean_val, "std": std_val, "alpha": alpha_val, "beta": beta_val}
        sew_params: dict for Shoulder-Elbow-Wrist angle, same format as hse_params.
        ewp_params: dict for Elbow-Wrist-Pinky angle, same format as above.
    
    Process:
        - Computes:
            hse: angle between hip, shoulder, and elbow (vertex = shoulder)
            sew: angle between shoulder, elbow, and wrist (vertex = elbow)
            ewp: angle between elbow, wrist, and pinky (vertex = wrist)
        - For each angle, scales it to [0,1] by dividing by 180.
        - Evaluates the Beta PDF at the computed angle and at the stored mean (scaled).
        - Computes the score as:
              score = (BetaPDF(new_angle/180) / BetaPDF(mean/180)) * 100
          and clamps the result between 0 and 100.
    
    Returns:
        A dictionary with keys:
            "hse_score": similarity score for Hip-Shoulder-Elbow angle,
            "sew_score": similarity score for Shoulder-Elbow-Wrist angle,
            "ewp_score": similarity score for Elbow-Wrist-Pinky angle.
    """
    # Extract coordinates.
    hip = new_data["hip"]
    shoulder = new_data["shoulder"]
    elbow = new_data["elbow"]
    wrist = new_data["wrist"]
    pinky = new_data["pinky"]
    
    # Compute angles:
    # hse: hip -> shoulder -> elbow (vertex = shoulder)
    angle_hse = calculate_angle(shoulder, hip, elbow)
    # sew: shoulder -> elbow -> wrist (vertex = elbow)
    angle_sew = calculate_angle(elbow, shoulder, wrist)
    # ewp: elbow -> wrist -> pinky (vertex = wrist)
    angle_ewp = calculate_angle(wrist, elbow, pinky)
    
    # For hse:
    hse_mean = hse_params["mean"]
    hse_alpha = hse_params["alpha"]
    hse_beta  = hse_params["beta"]
    pdf_hse_new = beta.pdf(angle_hse / 180.0, hse_alpha, hse_beta)
    pdf_hse_mean = beta.pdf(hse_mean / 180.0, hse_alpha, hse_beta)
    score_hse = (pdf_hse_new / pdf_hse_mean) * 100 if pdf_hse_mean != 0 else 0
    score_hse = max(0, min(100, score_hse))
    
    # For sew:
    sew_mean = sew_params["mean"]
    sew_alpha = sew_params["alpha"]
    sew_beta  = sew_params["beta"]
    pdf_sew_new = beta.pdf(angle_sew / 180.0, sew_alpha, sew_beta)
    pdf_sew_mean = beta.pdf(sew_mean / 180.0, sew_alpha, sew_beta)
    score_sew = (pdf_sew_new / pdf_sew_mean) * 100 if pdf_sew_mean != 0 else 0
    score_sew = max(0, min(100, score_sew))
    
    # For ewp:
    ewp_mean = ewp_params["mean"]
    ewp_alpha = ewp_params["alpha"]
    ewp_beta  = ewp_params["beta"]
    pdf_ewp_new = beta.pdf(angle_ewp / 180.0, ewp_alpha, ewp_beta)
    pdf_ewp_mean = beta.pdf(ewp_mean / 180.0, ewp_alpha, ewp_beta)
    score_ewp = (pdf_ewp_new / pdf_ewp_mean) * 100 if pdf_ewp_mean != 0 else 0
    score_ewp = max(0, min(100, score_ewp))
    
    return {
        "hse_score": score_hse,
        "sew_score": score_sew,
        "ewp_score": score_ewp
    }

def main():
    # Dummy distribution parameters for front view angles (as might be generated by generate_front_bell_curves).
    hse_params = {"mean": 30.0, "std": 4.0, "alpha": 1.5, "beta": 2.0}
    sew_params = {"mean": 45.0, "std": 5.0, "alpha": 2.0, "beta": 3.0}
    ewp_params = {"mean": 60.0, "std": 6.0, "alpha": 2.5, "beta": 3.5}
    
    # Dummy new front view data.
    # Coordinates are in [x, y] format. Typically these would be extracted from a video.
    new_front_data = {
        "hip": [90, 180],
        "shoulder": [100, 200],
        "elbow": [110, 250],
        "wrist": [120, 300],
        "pinky": [125, 305]
    }
    
    # Compute similarity scores for the front view.
    front_scores = compare_front(new_front_data, hse_params, sew_params, ewp_params)
    
    print("Front view similarity scores:")
    print(front_scores)

if __name__ == "__main__":
    main()
